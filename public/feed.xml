<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text" xml:lang="en"></title>
  <link type="application/atom+xml" href="http://edwardhotchkiss.com/feed/" rel="self"/>
  <link type="text" href="http://edwardhotchkiss.com" rel="alternate"/>
  <updated>2012-05-23T00:12:22-04:00</updated>
  <id>http://edwardhotchkiss.com</id>
  <author>
    <name>Edward Hotchkiss</name>
  </author>
  <rights>Copyright (c) 2009-2012, Edward Hotchkiss; all rights reserved.</rights>
  
  
  <entry>
    <title>Node.JS PostageApp Module Release by Unfolio</title>
    <link href="http://edwardhotchkiss.com/blog/2012/04/08/node.js-postage-app-module-release-by-unfolio"/>
    <updated>Apr 08, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/04/08/node.js-postage-app-module-release-by-unfolio</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s PostageApp?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://postageapp.com/&quot;&gt;PostageApp&lt;/a&gt; is a really sweet high octane service that let&amp;rsquo;s you auth in to send email from web apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After checking out &lt;strong&gt;PostageApp&lt;/strong&gt;&amp;rsquo;s current Node.JS API Module I noticed that it lacked some needed error handling and was using some deprecated http calls.&lt;/p&gt;

&lt;p&gt;At &lt;strong&gt;Unfolio&lt;/strong&gt; we released a nicely packaged new PostageApp module.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sending a Message:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;In addition there methods for fetching project info, account info, message receipts etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href=&quot;http://github.com/unfolio/postage&quot;&gt;postage&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>5 things for Developers to avoid in Prison</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/29/5-things-for-developers-to-avoid-in-prison"/>
    <updated>Mar 29, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/29/5-things-for-developers-to-avoid-in-prison</id>
    <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Getting your Git pushed in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Becoming someone else&amp;rsquo;s Open Source project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting forked too many times.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Raw code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unprotected Access.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
  
  <entry>
    <title>Learning AngularJS 1.0.0, part 1 of 10 - Introduction to 1.0.0</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/28/learning-angular.js-1.0.0%2C-part-1-of-10-introduction-to-1.0.0"/>
    <updated>Mar 28, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/28/learning-angular.js-1.0.0,-part-1-of-10-introduction-to-1.0.0</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Ranked #4 on Google search for AngularJS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I was going over my &lt;a href=&quot;http://mixpanel.com/&quot;&gt;MixPanel&lt;/a&gt; analytics, and kept seeing a shitload of traffic coming in from &lt;a href=&quot;www.google.com/search?q=angular.js&quot;&gt;searching google for angular.js&lt;/a&gt;. I&amp;rsquo;m ranked #4 with my &lt;a href=&quot;http://edwardhotchkiss.com/blog/2012/03/11/jekyll-live-search-with-angular.js/&quot;&gt;Jekyll Live Search with AngularJS&lt;/a&gt; so I feel obligated to take this from &lt;em&gt;drafts to &lt;/em&gt;posts, and finish it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Part 1 has one purpose. To show you some of the 1.0.0 breaking API changes, and to get you started with a proper directory structure and a trivial app which will let you expand upon (solo, or as we go along to more advanced posts this week) and build a non-trivial Web app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting Real&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not using &lt;strong&gt;AngularJS&lt;/strong&gt; and you&amp;rsquo;re either crafting from hand with &lt;a href=&quot;http://jquery.org&quot;&gt;jQuery&lt;/a&gt; or using one of the &lt;a href=&quot;http://backbonejs.com&quot;&gt;fads&lt;/a&gt; &lt;a href=&quot;http://knockoutjs.com/&quot;&gt;that&lt;/a&gt; &lt;a href=&quot;https://github.com/maccman/spine/&quot;&gt;kicked&lt;/a&gt; &lt;a href=&quot;http://sammyjs.org/&quot;&gt;off&lt;/a&gt; the Client-side Routing and MVC changeup, it&amp;rsquo;s time to get real, and work even faster.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This is the true story&amp;hellip; of seven strangers&amp;hellip; picked to live in a house&amp;hellip;work together and have their lives taped&amp;hellip; to find out what happens&amp;hellip; when people stop being polite&amp;hellip; and start getting real&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;mdash; The Real World.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Before &lt;a href=&quot;http://gettingreal.37signals.com/&quot;&gt;37 Signals got real&lt;/a&gt;, There was &amp;ldquo;The Real World&amp;rdquo;. Yeah, I know; Awesome.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular current &amp;ndash; 1.0.0 RC2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve spoken with a lot of developers that didn&amp;rsquo;t go with Angular, because they said that the API was too fast in flux and that the docs weren&amp;rsquo;t that great. They moved on, and passed it by. This is unfortunate. &lt;strong&gt;Angular&lt;/strong&gt; is currently on 1.0.0 RC2 (&lt;strong&gt;finally&lt;/strong&gt;) with the core team telling me to expect about one RC per week until we are at a release. The API changes are &lt;strong&gt;not breaking&lt;/strong&gt; anymore and if there ever was a time to seize the day, it&amp;rsquo;s now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting started today the fast way&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve started working on a project to scaffold &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.JS&lt;/a&gt; backend routes over &lt;a href=&quot;http://mongodb.org&quot;&gt;MongoDB&lt;/a&gt; using &lt;strong&gt;Angular&lt;/strong&gt; views/controller/services. I know right, why not scaffold the fastest client-side development framework ever written? Right now, you can use my &lt;a href=&quot;http://search.npmjs.org/#/angular&quot;&gt;CLI Node.js Module&lt;/a&gt; to automatically generate a new Node.js and Angular project, with &lt;strong&gt;HTML5 Routing&lt;/strong&gt;, the new &lt;strong&gt;$routeProvider&lt;/strong&gt; and &lt;strong&gt;module&lt;/strong&gt; structure already setup. So keep an eye on the project &amp;amp; hold up for scaffolding, as the project is pretty new (a few days).&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting started the boring way&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to manually grab these starting files, head over to &lt;a href=&quot;https://github.com/edwardhotchkiss/node-angular/tree/master/lib/node-angular/templates&quot;&gt;node-angular&lt;/a&gt; and just git clone then keep those files handy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features of this trivial app&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The application is taking advantage of HTML5 pushState, and while we&amp;rsquo;re hitting /welcome versus /#/welcome, &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; is actually rendering our index.html view with Angular calling the appropriate partial based on our path (/welcome). The 1.0.0 &lt;strong&gt;$routeProvider&lt;/strong&gt; takes care of this. While we&amp;rsquo;re being shown /welcome vs. / this is because I set my default route to /welcome with $routeProvider.otherwise({ redirectTo : &amp;lsquo;/welcome&amp;rsquo; });&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Node &amp;ndash; /app/controllers/welcome.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular &amp;ndash; /public/javascripts/app.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;If &lt;strong&gt;Angular&lt;/strong&gt; doesn&amp;rsquo;t detect HTML5 / pushState capabilities, it will fall back to hashes, which is why I set my hash prefix to an empty string.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Angular 1.0.0 Controllers and $scope&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Angular controllers from 0.10.6 to 1.0.0 went from the classic JavaScript context referencing&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;to the &lt;strong&gt;Angular Way&lt;/strong&gt; of injecting a scope or reference value&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;If I need access to a Service, an Angular provider etc, then I inject scope into my controller along with my required providers:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ng-app and our main view layout&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Angular 1.0.0 ng:autobind was removed and your angular script is referenced in a &amp;ldquo;normal&amp;rdquo; script tag fashion. In our layout we have a top level element with the ng-app attribute referencing our app, aptly titled &amp;ldquo;app&amp;rdquo;. I have an &lt;ng-view&gt;&lt;/ng-view&gt; where my partials are loaded and controllers applied within that context.&lt;/p&gt;

&lt;p&gt;One of the huge API changes is no longer using mustache style model values directly in our HTML elements if we are using a | filter. Instead we&amp;rsquo;re using the attribute ng-bind-template=&amp;ldquo;my-model-var | filter:filter&amp;rdquo; to apply, (see below).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s our main layout:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/public.index.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;This is our view partial:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/public/partials/welcome.html&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://docs-next.angularjs.org/api&quot;&gt;AngularJS Docs &amp;ndash; Latest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular.js/wiki/JsFiddle-Examples&quot;&gt;AngularJS Fiddles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.com/angular-ui&quot;&gt;New Project Angular-UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;Check back tomorrow for part 2, &amp;ldquo;Rendering views retrieved from a Service&amp;rdquo;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 3-28-12 Igor Speaks!:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I received some comments from &lt;a href=&quot;https://twitter.com/#!/igorminar&quot;&gt;Igor Minar&lt;/a&gt; and it seems that the declarative XML style ng:whatever is now wholely substituted with ng-whatever. Thanks Igor and also for the note that it&amp;rsquo;s &lt;strong&gt;AngularJS&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; Angular.js. All the .js projects have their own convention, and it gets quite confusing.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>No one likes an unkempt public area - Open Source guidelines to Cleanliness</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/19/no-one-likes-an-unkempt-public-area-open-source-guidelines-to-cleanliness"/>
    <updated>Mar 19, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/19/no-one-likes-an-unkempt-public-area-open-source-guidelines-to-cleanliness</id>
    <content type="html">&lt;p&gt;Open Source has one general pre-requisite: that it be freely redestributed and community driven. When &lt;a href=&quot;http://github.com/&quot;&gt;GitHub&lt;/a&gt; was introduced; the ecosystem saw a logical and pragmatic way to bring together disparate developers to easily fork a repository, make changes and submit a pull request. Suddenly everyone and everything was embracing open-source; from corporations sponsoring projects to use as their lifeblood, to individuals creating basic concepts for self-use and using GitHub as a free storage ground.&lt;/p&gt;

&lt;p&gt;There was no moderation, no one set any guidelines, or best practices on how to do &lt;strong&gt;&lt;em&gt;Open Source&lt;/em&gt;&lt;/strong&gt; on GitHub. The natives had no way except by casual reference or language/framework requirements to determine how to setup a proper and organized repository structure.&lt;/p&gt;

&lt;p&gt;As a repository owner: you have certain obligations (some of which I am guilty of not keeping up). Especially those repositories that are highly active with community usage and with codebase contributions from outside developers. You have an obligation to release code that is tested. Automated spec is preferrable. You have an obligation to document your code and build process, most especially &amp;mdash; your contribution and pull request policy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why am I obligated?&lt;/strong&gt;. These developers are sweating blood and tears to give you, of all people &lt;strong&gt;&lt;em&gt;free code&lt;/em&gt;&lt;/strong&gt;. You setup this sweet idea, and people fix your code for free &amp;mdash; pretty wild right? Tell any outside party and they will have their mind blown.&lt;/p&gt;

&lt;p&gt;I recently wanted to contribute to a larger project and couldn&amp;rsquo;t find my way around. I&amp;rsquo;m an experienced programmer and have contributed to projects before. The repository looked like something out of hoarders &amp;ndash; best of. There were .project files littered all over the place, total lack of automated test process, and private discourse on project futures.&lt;/p&gt;

&lt;p&gt;Then there are the people doing it right. Checkout &lt;a href=&quot;https://github.com/SteveSanderson/knockout/&quot;&gt;Knockout.js&lt;/a&gt;. There are three organized folders with all examples and documentation on a separate branch/&lt;a href=&quot;http://knockoutjs.com/&quot;&gt;Website&lt;/a&gt; and a clean structure like a boss.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Two sweet articles to rock out with:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jesusabdullah.github.com/2011/11/09/readmes.html&quot;&gt;How To Write A Readme&lt;/a&gt; &amp;amp; of course &lt;a href=&quot;http://jsconf.nodejitsu.com/&quot;&gt;How to be&amp;hellip;
an open-source gangster&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Help the guy wanting to add sweet feature x to your project. &lt;strong&gt;Ten minutes&lt;/strong&gt; of your time making it easier for the dude busting his ass spending &lt;strong&gt;ten hours&lt;/strong&gt; of his time is well worth it.&lt;/p&gt;

&lt;p&gt;Girl: &amp;ldquo;&lt;strong&gt;Who said my shit was unkempt!?&lt;/strong&gt;&amp;rdquo;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>5 Ways to export the same Node.js module</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/15/5-ways-to-export-the-same-node.js-module"/>
    <updated>Mar 15, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/15/5-ways-to-export-the-same-node.js-module</id>
    <content type="html">&lt;p&gt;When I look through the code of some of my first &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.JS&lt;/a&gt; modules that I wrote I look at the different ways that I handled their class structure and export. It&amp;rsquo;s all eye-candy to me, but pick your favorite, or .apply() as argumented.&lt;/p&gt;

&lt;p&gt;This module is called &lt;strong&gt;&amp;ldquo;dude&amp;rdquo;&lt;/strong&gt;, and all it does is one thing (for brevity) via a public method named &lt;strong&gt;&amp;ldquo;say&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage.js&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method #1:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method #2:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method #3:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method #4:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage for #5 (using {params}):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Method #5:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;Use on a case by case basis.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Node.JS - Automation with a Makefile</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/14/node.js-automation-with-a-makefile"/>
    <updated>Mar 14, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/14/node.js-automation-with-a-makefile</id>
    <content type="html">&lt;p&gt;Make is a really old piece of *NIX systems that automates a build processes. The build process doesn&amp;rsquo;t need to be a .c project, it works great with any type of software application.&lt;/p&gt;

&lt;p&gt;Using a Makefile within a project directory let&amp;rsquo;s you drastically reduce the time spent doing trivial tasks. &lt;strong&gt;If you have a ./scripts/ directory handling your tasks then you&amp;rsquo;re doing it wrong&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install UglifyJS &amp;amp; LESS:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create your Makefile:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Setup your Makefile:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Closing:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In current and past projects I have all kinds of Makefile setups. Some commands are pretty sweet such as &amp;ldquo;make deploy&amp;rdquo;. &lt;strong&gt;Automate. Everything&lt;/strong&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Testing a Spawned Process with Node.JS and Vows</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/12/testing-a-spawned-process-with-node.js-and-vows"/>
    <updated>Mar 12, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/12/testing-a-spawned-process-with-node.js-and-vows</id>
    <content type="html">&lt;p&gt;If you&amp;rsquo;re &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.JS&lt;/a&gt; projects index file is &amp;ldquo;app.js&amp;rdquo;, and you are running your tests via &amp;ldquo;npm test&amp;rdquo; or &amp;ldquo;make test&amp;rdquo; looking to test a live project, then this works nicely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Directory Structure:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;| &amp;mdash; app.js&lt;br/&gt;
| &amp;mdash; Makefile&lt;br/&gt;
| &amp;mdash; test/&lt;br/&gt;
| &amp;mdash; | &amp;mdash; index.test.js&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;./test/index.test.js:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Angular.js Routing Like a Boss</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/12/angular.js-routing-like-a-boss"/>
    <updated>Mar 12, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/12/angular.js-routing-like-a-boss</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I think that route setup in &lt;a href=&quot;http://angularjs.org&quot;&gt;Angular.js&lt;/a&gt; is unsexy. No one likes to feel unsexy (&lt;strong&gt;to all my bitches out there can I get a yayyaahhh&lt;/strong&gt;) &amp;mdash; so let&amp;rsquo;s write a &amp;ldquo;class&amp;rdquo; to duplicate the smoothe operator style of &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; and &lt;a href=&quot;http://sinatrarb.com&quot;&gt;Sinatra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another thing that I like about Express that Angular doesn&amp;rsquo;t do &amp;mdash; is automatically matching trailing slashes (/route matches /route and /route/).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Angular.js Way:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implemened in Angular:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Code:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Jekyll Live Search with AngularJS</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/11/jekyll-live-search-with-angular.js"/>
    <updated>Mar 11, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/11/jekyll-live-search-with-angular.js</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wanted users hitting my static &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; site&amp;rsquo;s &lt;a href=&quot;http://edwardhotchkiss.com/404.html&quot;&gt;404 page&lt;/a&gt; to be able to live search. As you type, blog pages related to your query should show up in real-time. Since Jekyll is static, I use &lt;a href=&quot;http://angularjs.org&quot;&gt;AngularJS&lt;/a&gt; on the client-side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why AngularJS?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Forget &lt;a href=&quot;http://documentcloud.github.com/backbone/&quot;&gt;Backbone.js&lt;/a&gt;, &lt;a href=&quot;http://knockoutjs.com/&quot;&gt;Knockout.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/maccman/spine&quot;&gt;Spine&lt;/a&gt;. Try Angular and then note the resulting LOC. Spend that extra time at the bar. Buy me a beer while you&amp;rsquo;re there.&lt;/p&gt;

&lt;p&gt;I set Angular to bind an XHR resource to a filter (in this case, a text input). Upon load, the GET request fires, then pulls my &lt;a href=&quot;/feed.xml&quot;&gt;RSS Feed&lt;/a&gt;, parsing the XMLDocument and placing it in the scope of my controller as an object called &amp;ldquo;posts&amp;rdquo;. &amp;ldquo;posts&amp;rdquo; is rendered into my HTML via a templating system which attaches models via the Controller to the my Template once it is available.&lt;/p&gt;

&lt;p&gt;As the user types, the &amp;ldquo;Posts&amp;rdquo; object is filtered and applied to the template. You can check it out here: &lt;a href=&quot;http://edwardhotchkiss.com/404.html&quot;&gt;http://edwardhotchkiss.com/404.html&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First we need to be able to allow double curly brackets in our templates, since Liquid strips these out interpreting them as Liquid Tags. We need to edit config.yml to fix this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;_config.yml:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RSS Feed:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Probably the easiest is to just grab this repo, it&amp;rsquo;s there as &amp;ldquo;feed.xml&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Link to Angular 0.10.6:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Search &amp;amp; Templating HTML:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AngularJS Controller &amp;amp; Parser:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 3-28-12 Igor Speaks!:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I received some comments from &lt;a href=&quot;https://twitter.com/#!/igorminar&quot;&gt;Igor Minar&lt;/a&gt; and it seems that the declarative XML style ng:whatever is now wholely substituted with ng-whatever. Thanks Igor and also for the note that it&amp;rsquo;s &lt;strong&gt;AngularJS&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;not&lt;/em&gt;&lt;/strong&gt; Angular.js. All the .js projects have their own convention, and it gets quite confusing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 3-11-12 (Later that night!):&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I got a great email from &lt;a href=&quot;https://twitter.com/bokowski&quot;&gt;Boris Bokowski&lt;/a&gt; who linked me to a fiddle that &lt;strong&gt;&lt;em&gt;&amp;ldquo;I might find interesting&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;. Interesting indeed. So I updated the demo here on my site and this article &amp;mdash; to include a highlight filter &amp;amp; a proper Angular 0.10.x Module. Thanks again Boris.&lt;/p&gt;

&lt;p&gt;There it is, sexy as hell! As always, any questions just &lt;a href=&quot;mailto:edwardhotchkiss@me.com&quot;&gt;Email Me&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Jekyll and MixPanel</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/10/jekyll-and-mixpanel"/>
    <updated>Mar 10, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/10/jekyll-and-mixpanel</id>
    <content type="html">&lt;p&gt;After getting rid of &lt;a href=&quot;http://google.com/analytics&quot;&gt;Google Analytics&lt;/a&gt; &amp;mdash; it was time for &lt;a href=&quot;http://mixpanel.com/&quot;&gt;MixPanel&lt;/a&gt;. It&amp;rsquo;s a pretty tight event driven Analytics tool which let&amp;rsquo;s you bind tracking events to their API with a high level syntax.&lt;/p&gt;

&lt;p&gt;As Google is a dinosaur, and dinosaurs (along with disgusting UI &amp;amp; Design) should be extinct, let&amp;rsquo;s roll.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is how MixPanel generally works:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;Since &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; _posts are being edited (and sometimes viewed, proofed) locally, an obvious way to use MixPanel would be to wrap it&amp;rsquo;s tracking events with a test for being in production (yourhost.com) or localhost.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d like to eventually add in some more JS into the site so I&amp;rsquo;ll wrap it in an Object called &amp;ldquo;jekyll&amp;rdquo; Drop this script within your default layout below the MixPanel API code.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wrapping up&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Feel free to add the other MixPanel objects such as .register to the script. Since this is just a &amp;ldquo;blog aware static site generator&amp;rdquo;; I&amp;rsquo;ll stick with track.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code via Gist:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/2012162&quot;&gt;https://gist.github.com/2012162&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>List all MongoDB Collections with Node.JS</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/09/list-all-mongodb-collections-with-node.js"/>
    <updated>Mar 09, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/09/list-all-mongodb-collections-with-node.js</id>
    <content type="html">&lt;p&gt;We (the privileged, hah) all know and love &lt;a href=&quot;http://mongohq.com/&quot;&gt;MongoHQ&lt;/a&gt; &amp;mdash; with it&amp;rsquo;s slick interface, it&amp;rsquo;s nice web-based app and it&amp;rsquo;s alliance with &lt;a href=&quot;http://heroku.com/&quot;&gt;Heroku&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But sometimes you need to get a list of user-available collections from a MongoDB instance without MongoHQ. The process starts with exposing the MongoDB-Native Object from within &lt;a href=&quot;http://mongoosejs.com/&quot;&gt;MongooseJS&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install MongooseJS&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Save it:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Run it:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gist:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/1522555&quot;&gt;https://gist.github.com/1522555/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Node.JS Sinatra Style Routing</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/08/node.js-sinatra-style-routing"/>
    <updated>Mar 08, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/08/node.js-sinatra-style-routing</id>
    <content type="html">&lt;p&gt;Having spent the past two years working with first &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt;; then falling head over heels for &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; with &lt;a href=&quot;http://expressjs.com&quot;&gt;ExpressJS&lt;/a&gt; &amp;mdash; I found myself attracted to that sexy and verbose set of convenience methods for routing.&lt;/p&gt;

&lt;p&gt;I threw this together a while back as a quick and dirty hack to run a small site without having to include Express.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Code:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fork and Edit&lt;/strong&gt; &amp;mdash; &lt;a href=&quot;https://gist.github.com/1557002&quot;&gt;https://gist.github.com/1557002&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Learnode.js by Dean Sofer</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/08/learnode.js-by-dean-sofer"/>
    <updated>Mar 08, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/08/learnode.js-by-dean-sofer</id>
    <content type="html">&lt;p&gt;I haven&amp;rsquo;t seen dedication like this since &lt;a href=&quot;http://en.wikipedia.org/wiki/Enumclaw_horse_sex_case&quot;&gt;Mr Hands&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;A colleague of mine spent a lot of time bringing together a screencast using &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;, &lt;a href=&quot;http://angularjs.org/&quot;&gt;Angular.js&lt;/a&gt; &amp;amp; MongoDB from beginning to fully deployed app in an hour and 12 minutes.&lt;/p&gt;

&lt;p&gt;I often get a lot of questions on where to start, what to start with, &amp;amp; what tools to use. Dean did a really nice job of bringing all of that together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;From his Page:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;  &amp;ldquo;An End-to-End introduction to Node.js, MongoDB, Express.js, Mongoose and AngularJS using Nodester and MongoHQ. Go from absolutely 0 knowledge to having a basic, functional, deployed CRUD application live and online in just one hour!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Check it out on Vimeo: &lt;a href=&quot;http://vimeo.com/proloser/learnodejs&quot;&gt;http://vimeo.com/proloser/learnodejs&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>On Blogging</title>
    <link href="http://edwardhotchkiss.com/blog/2012/03/07/On-Blogging"/>
    <updated>Mar 07, 2012</updated>
    <id>http://edwardhotchkiss.com/blog/2012/03/07/On-Blogging</id>
    <content type="html">&lt;p&gt;When I was a much younger developer; I often wondered why older developers were not embracing blogging. I felt that it was this excitig new technology that would change how we communicated. I wrote, and often felt that the seemingly wiser, older tech stars had much more to say than myself. So I stopped writing.&lt;/p&gt;

&lt;p&gt;Flash-forward to &lt;strong&gt;Age 30&lt;/strong&gt;, and I think of a quote by the lovel Ms. Plath:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&amp;ldquo;The silence depressed me. It wasn&amp;rsquo;t the silence of silence. It was my own silence.&amp;rdquo;
&amp;mdash; Sylvia Plath, &amp;ldquo;The Bell Jar&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;More and more often I meet younger developers that have questions, with a yearn for truly satisfying knowledge. I may now speak.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Flash vs. HTML5. The debates exclusion of mentioning Adobe AIR</title>
    <link href="http://edwardhotchkiss.com/blog/2010/06/07/flash-vs-html5-and-the-debates-exclusion-of-mentioning-adobe-air"/>
    <updated>Jun 07, 2010</updated>
    <id>http://edwardhotchkiss.com/blog/2010/06/07/flash-vs-html5-and-the-debates-exclusion-of-mentioning-adobe-air</id>
    <content type="html">&lt;p&gt;The debate rages on over whether or not the Apple iPad is a &amp;ldquo;Flash Killer&amp;rdquo;. One point which most people neglect to mention is that Adobe AIR powers TweetDeck, an application &lt;strong&gt;CREATED&lt;/strong&gt; in Adobe Flash, which allows for cross-platform compatibility.&lt;/p&gt;

&lt;p&gt;With Android right on Apple&amp;rsquo;s tail, and an imminent launch of Flash 10.1 for the Android platform; will Apple finally cave? There is a long standing symbiotic relationship between both Apple Computers and Adobe. Can the rift be repaired, or will I be stuck for the next ten years reading endless debates on the futility or vitality of either platform.&lt;/p&gt;

&lt;p&gt;Ironically, most of these opponents of Flash are tweetings against Flash &lt;strong&gt;&lt;em&gt;via&lt;/em&gt;&lt;/strong&gt; TweetDeck for Desktop (Made with Adobe AIR. ie: &lt;strong&gt;FLASH&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Hypocrites or pure ignorance?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>JavaScript jQuery Image Preloader with Animations</title>
    <link href="http://edwardhotchkiss.com/blog/2009/04/08/a-javascript-jquery-image-preloader-with-animations"/>
    <updated>Apr 08, 2009</updated>
    <id>http://edwardhotchkiss.com/blog/2009/04/08/a-javascript-jquery-image-preloader-with-animations</id>
    <content type="html">&lt;p&gt;When I started migrating from pure Flash (ActionScript 3.0) based sites to HTML markup with CSS3 &amp;amp; jQuery; I wanted a really sexy preloader. I found one. One single JavaScript preloader.&lt;/p&gt;

&lt;p&gt;Addicted to sex, I wanted something hotter. Here&amp;rsquo;s what I built&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;End of your HEAD:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;End of your BODY:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory &amp;ndash; posix_spawnp&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Live Demo setup by Jaydson Gomes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jaydson.org/code/jquery/plugins/jquery-preloader/&quot;&gt;http://jaydson.org/code/jquery/plugins/jquery-preloader/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Source Code with Usage &amp;amp; Demos:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/edwardhotchkiss/jquery-preloader&quot;&gt;https://github.com/edwardhotchkiss/jquery-preloader/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
</feed>